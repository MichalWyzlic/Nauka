class Stack {	
	constructor() {
		this.queue = new Queue();
		this.size = 0;
	}

    push(val) {
		this.size++;
		if(this.queue.size === 0){
			this.queue.enqueue(val);
			return this;			
		}

<<<<<<< HEAD
		let queue2 = new Queue();
		queue2.enqueue(val);
		while(this.queue.size > 0){
			queue2.enqueue(this.queue.dequeue());			
		};
		this.queue = queue2;
		return this;
	}

    pop() {
		if(this.size === 0) return null;
		this.size--;
		return this.queue.dequeue();		
	}
}

// QUEUE AND NODE HAVE BEEN IMPLEMENTED FOR YOU

class Node {
    constructor(value) {
        this.value = value;
        this.next = null;
    }
}

class Queue {
    constructor() {
        this.first = null;
        this.last = null;
        this.size = 0;
    }
    enqueue(data) {
        var node = new Node(data);

        if (!this.first) {
            this.first = node;
            this.last = node;
        } else {
            this.last.next = node;
            this.last = node;
        }

        return ++this.size;
    }

    dequeue() {
        if (!this.first) return null;

        var temp = this.first;
        if (this.first == this.last) {
            this.last = null;
        }
        this.first = this.first.next;
        this.size--;
        return temp.value;
    }
}


var s = new Stack();
console.log(s.push(10).push(20).push(30));
console.log(s.pop()); // 30
console.log(s.pop()); // 20
console.log(s.pop()); // 10
console.log(s.pop()); // null
console.log(s.push(30).push(40).push(50));
console.log(s.pop()); // 50
console.log(s.push(60));
console.log(s.pop()); // 60
=======
		return this.queue;
	}

	dequeue() {
		let minNode = this.queue[0];
		let valueToBubble = this.queue.pop();
		if (this.queue.length === 0) return minNode;

		this.queue[0] = valueToBubble;
		let bubbleUP = true;
		let index = 0;

		while (bubbleUP) {
			let leftIndex = index * 2 + 1;
			let rightIndex = leftIndex + 1;
			let leftCondition =
				leftIndex < this.queue.length &&
				valueToBubble.priority > this.queue[leftIndex].priority;
			let rightCondition =
				rightIndex < this.queue.length &&
				valueToBubble.priority > this.queue[rightIndex].priority;
			if (leftCondition && rightCondition) {
				if (
					this.queue[leftIndex].priority <
					this.queue[rightIndex].priority
				) {
					this.queue[index] = this.queue[leftIndex];
					this.queue[leftIndex] = valueToBubble;
					index = leftIndex;
				} else {
					this.queue[index] = this.queue[rightIndex];
					this.queue[rightIndex] = valueToBubble;
					index = rightIndex;
				}
			} else if (leftCondition) {
				this.queue[index] = this.queue[leftIndex];
				this.queue[leftIndex] = valueToBubble;
				index = leftIndex;
			} else if (rightCondition) {
				this.queue[index] = this.queue[rightIndex];
				this.queue[rightIndex] = valueToBubble;
				index = rightIndex;
			} else {
				bubbleUP = false;
			}
		}

		return minNode;
	}
}

class WeightedGraph {
	constructor() {
		this.adjacencyList = {};
	}

	addVertex(vertex) {
		if (!this.adjacencyList[vertex]) this.adjacencyList[vertex] = [];
	}

	addEdge(vertex1, vertex2, weight) {
		this.adjacencyList[vertex1].push({ node: vertex2, weight });
		this.adjacencyList[vertex2].push({ node: vertex1, weight });
	}

	dijkstra(start, finish) {
		const nodes = new PriorityQueue();
		const distances = {};
		const previous = {};
		let smallest;

		//initialise
		for (let vertex in this.adjacencyList) {
			if (vertex === start) {
				distances[start] = 0;
				nodes.enqueue(start, 0);
			} else {
				distances[vertex] = Infinity;
				nodes.enqueue(vertex, Infinity);
			}
			previous[vertex] = null;
		}

		//as long as there is something to visit
		while (nodes.queue.length > 0) {
			smallest = nodes.dequeue().value;
			if (smallest === finish) {
				const results = [finish];
				let tempNode = finish;
				console.log(distances);
				console.log(previous);
				console.log(nodes);
				//we are done
				//build the path
				while (tempNode !== start) {
					tempNode = previous[tempNode];
					results.unshift(tempNode);
				}
				return results;
			}
			if (smallest || distances[smallest] !== Infinity) {
				for (let neighbor in this.adjacencyList[smallest]) {
					//find neighbour node
					let nextNode = this.adjacencyList[smallest][neighbor];
					//calculate the distance to the nextNode
					let candidate = distances[smallest] + nextNode.weight;
					if (candidate < distances[nextNode.node]) {
						distances[nextNode.node] = candidate;
						previous[nextNode.node] = smallest;
						nodes.enqueue(nextNode.node, candidate);
					}
				}
			}
		}
	}
}

let graph = new WeightedGraph();
graph.addVertex('A');
graph.addVertex('B');
graph.addVertex('C');
graph.addVertex('D');
graph.addVertex('E');
graph.addVertex('F');

graph.addEdge('A', 'B', 4);
graph.addEdge('A', 'C', 2);
graph.addEdge('B', 'E', 3);
graph.addEdge('C', 'D', 2);
graph.addEdge('C', 'F', 4);
graph.addEdge('D', 'E', 3);
graph.addEdge('D', 'F', 1);
graph.addEdge('E', 'F', 1);

console.log(graph.dijkstra('A', 'E'));

function sortedFrequency(arr, val) {
	if (arr[0] > val || arr[arr.length - 1] < val) return -1;
	// add whatever parameters you deem necessary - good luck!
	//lef limit
	let leftLimit = 0;
	let rightLimit = arr.length - 1;
	let left = leftLimit;
	let right = rightLimit;
	let end = false;
	if (arr[0] !== val) {
		while (right - left > 1) {
			let mid = Math.floor((left + right) / 2);
			if (arr[mid] < val) {
				left = mid;
			} else {
				right = mid;
				if (arr[right] > val) rightLimit = right;
			}
		}
		if (arr[right] !== val) return 0;
		leftLimit = right;
	}

	left = leftLimit;
	right = rightLimit;
	if (arr[arr.length - 1] !== val) {
		while (right - left > 1) {
			let mid = Math.floor((left + right) / 2);
			if (arr[mid] <= val) {
				left = mid;
			} else {
				right = mid;
			}
		}
		if (arr[left] !== val) return 0;
		rightLimit = left;
	}

	return rightLimit - leftLimit + 1;
}

// console.log(sortedFrequency([1, 1, 2, 2, 2, 2, 3], 2)); // 4
// console.log(sortedFrequency([1, 1, 2, 2, 2, 2, 3], 3)); // 1
// console.log(sortedFrequency([1, 1, 2, 2, 2, 2, 3], 1)); // 2
// console.log(sortedFrequency([1, 1, 2, 2, 2, 2, 3], 4)); // -1

function findRotatedIndex(arr, val) {
	if (arr[0] === val) return 0;
	if (arr[arr.length] === val) return arr.length;

	let left = 0;
	let right = arr.length - 1;

	let pivotIndex = 0;
	//find the pivot index - the first index of the original array
	if (arr[0] > arr[arr.length - 1]) {
		while (right - left > 1) {
			let mid = Math.floor((left + right) / 2);
			//if(arr[mid] === val) return mid;
			if (arr[mid] > arr[right]) {
				left = mid;
			} else {
				right = mid;
			}
		}
		pivotIndex = right;
	}

	//there is no solution
	if (arr[pivotIndex - 1] < val || arr[pivotIndex] > val) return -1;
	//solution is at the pivot index
	if (arr[pivotIndex] === val) return pivotIndex;

	//search in the bigger part
	if (arr[0] <= val) {
		left = 0;
		right = pivotIndex - 1;
	} else {
		left = pivotIndex;
		right = arr.length - 1;
	}

	while (right - left > 1) {
		let mid = Math.floor((left + right) / 2);
		if (arr[mid] < val) {
			left = mid;
		} else {
			right = mid;
		}
	}

	return arr[right] === val ? right : -1;
}

// console.log(findRotatedIndex([3, 4, 1, 2], 4)); // 1
// console.log(findRotatedIndex([6, 7, 8, 9, 1, 2, 3, 4], 8)); // 2
// console.log(findRotatedIndex([6, 7, 8, 9, 1, 2, 3, 4], 3)); // 6
// console.log(findRotatedIndex([37, 44, 66, 102, 10, 22], 14)); // -1
// console.log(findRotatedIndex([6, 7, 8, 9, 1, 2, 3, 4], 12)); // -1
// console.log(findRotatedIndex([11, 12, 13, 14, 15, 16, 3, 5, 7, 9], 16)); // 5

//selection sort
function sorting(arr, comparator) {
	if (typeof comparator !== 'function') {
		// provide a default
		comparator = (a, b) => a - b;
	}

	for (let i = 0; i < arr.length - 1; i++) {
		let minPos = i;
		for (let j = i + 1; j < arr.length; j++) {
			if (comparator(arr[j], arr[minPos]) < 0) {
				minPos = j;
			}
		}
		let temp = arr[i];
		arr[i] = arr[minPos];
		arr[minPos] = temp;
	}

	return arr;
}

console.log(sorting([4, 20, 12, 10, 7, 9])); // [4, 7, 9, 10, 12, 20]
console.log(sorting([0, -10, 7, 4])); // [-10, 0, 4, 7]
console.log(sorting([1, 2, 3])); // [1, 2, 3]
console.log(sorting([]));

var nums = [
	4, 3, 5, 3, 43, 232, 4, 34, 232, 32, 4, 35, 34, 23, 2, 453, 546, 75, 67,
	4342, 32
];
console.log(sorting(nums)); // [2, 3, 3, 4, 4, 4, 5, 23, 32, 32, 34, 34, 35, 43, 67, 75, 232, 232, 453, 546, 4342]

var kitties = ['LilBub', 'Garfield', 'Heathcliff', 'Blue', 'Grumpy'];

function strComp(a, b) {
	if (a < b) {
		return -1;
	} else if (a > b) {
		return 1;
	}
	return 0;
}

console.log(sorting(kitties, strComp)); // ["Blue", "Garfield", "Grumpy", "Heathcliff", "LilBub"]

var moarKittyData = [
	{
		name: 'LilBub',
		age: 7
	},
	{
		name: 'Garfield',
		age: 40
	},
	{
		name: 'Heathcliff',
		age: 45
	},
	{
		name: 'Blue',
		age: 1
	},
	{
		name: 'Grumpy',
		age: 6
	}
];

function oldestToYoungest(a, b) {
	return b.age - a.age;
}

console.log(sorting(moarKittyData, oldestToYoungest)); // sorted by age in descending order

function pivot(arr, comparator, start=0, end=arr.length - 1){
	if (typeof comparator !== 'function') {
		// provide a default
		comparator = (a, b) => a - b;
	}

	let pivotValue = arr[start];
	let pivotPos = start + 1;

	for(let i = start + 1; i <= end; i ++){
		if(comparator(arr[i], pivotValue) < 0){
			if(pivotPos < i){
				let temp = arr[i];
				arr[i] = arr[pivotPos];
				arr[pivotPos]=temp;
			}
			pivotPos++;			
		}
	}

	if(pivotPos > 1){
		arr[start] = arr[pivotPos-1];
		arr[pivotPos-1]=pivotValue;
	}
	return pivotPos-1;
}


function quickSort(arr, comparator, start=0, end=arr.length - 1){
	if(start === end) return;
	let fixedValue = pivot(arr, comparator, start, end);
	if(fixedValue > start) quickSort(arr, comparator, start, fixedValue-1);
	if(fixedValue < end) quickSort(arr, comparator, fixedValue+1, end);

	return arr;
}



console.log(quickSort([4, 20, 12, 10, 7, 9])); // [4, 7, 9, 10, 12, 20]
console.log(quickSort([0, -10, 7, 4])); // [-10, 0, 4, 7]
console.log(quickSort([1, 2, 3])); // [1, 2, 3]
console.log(quickSort([]));
 
var nums = [4, 3, 5, 3, 43, 232, 4, 34, 232, 32, 4, 35, 34, 23, 2, 453, 546, 75, 67, 4342, 32];
console.log(quickSort(nums)); // [2, 3, 3, 4, 4, 4, 5, 23, 32, 32, 34, 34, 35, 43, 67, 75, 232, 232, 453, 546, 4342]
 
var kitties = ["LilBub", "Garfield", "Heathcliff", "Blue", "Grumpy"];
 
function strComp(a, b) {
  if (a < b) { return -1;}
  else if (a > b) { return 1;}
  return 0;
}
 
console.log(quickSort(kitties, strComp)); // ["Blue", "Garfield", "Grumpy", "Heathcliff", "LilBub"]
 
var moarKittyData = [{
  name: "LilBub",
  age: 7
}, {
  name: "Garfield",
  age: 40
}, {
  name: "Heathcliff",
  age: 45
}, {
  name: "Blue",
  age: 1
}, {
  name: "Grumpy",
  age: 6
}];
 
function oldestToYoungest(a, b) {
  return b.age - a.age;
}
 
console.log(quickSort(moarKittyData, oldestToYoungest)); // sorted by age in descending order


function getDigit(num, pos){
	let power = Math.pow(10, pos + 1);
	let temp = num % power;
	if(pos > 0){
		power = power/10;
		return Math.floor(temp/power);
	}

	return temp;
}

function digitCount(num) {
	if(num === 0) return 1;
	  return Math.floor(Math.log10(num))+1;
  }
  
  function mostDigits(nums) {
	let mostDigits = 0;
	nums.forEach( num => {
		mostDigits = Math.max(mostDigits, digitCount(num));
	})
	
	return mostDigits;
  }

function radixSort(nums) {
  // good luck!
	let repetitions = mostDigits(nums);
	let newArr = nums;

	for(let i = 0; i < repetitions; i++){
		let tempArr = [];
		for(let j = 0; j < 10; j++){
			tempArr[j] = [];
		}

		nums.forEach( num => {
			tempArr[getDigit(num, i)].push(num);
		})

		nums = [];
		tempArr.forEach( digitArr => {
			nums = nums.concat(digitArr);
		})
	}

	return nums;
}

console.log(radixSort([4, 20, 12, 10, 7, 9])); // [4, 7, 9, 10, 12, 20]
console.log(radixSort([0, -10, 7, 4])); // [-10, 0, 4, 7]
console.log(radixSort([1, 2, 3])); // [1, 2, 3]
console.log(radixSort([]));
 
var nums = [4, 3, 5, 3, 43, 232, 4, 34, 232, 32, 4, 35, 34, 23, 2, 453, 546, 75, 67, 4342, 32];
console.log(radixSort(nums)); // [2, 3, 3, 4, 4, 4, 5, 23, 32, 32, 34, 34, 35, 43, 67, 75, 232, 232, 453, 546, 4342]
 
>>>>>>> 60c6bc80d00cf26ec590c12fb4ce29b195bd8314
